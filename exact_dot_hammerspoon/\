-- half of screen 
hs.hotkey.bind({"alt", "cmd"}, "left", function() hs.window.focusedWindow():moveToUnit({0, 0, 0.5, 1}) end)
hs.hotkey.bind({"alt", "cmd"}, "right", function() hs.window.focusedWindow():moveToUnit({0.5, 0, 0.5, 1}) end)
hs.hotkey.bind({"alt", "cmd"}, "up", function() hs.window.focusedWindow():moveToUnit({0, 0, 1, 0.5}) end)
hs.hotkey.bind({"alt", "cmd"}, "down", function() hs.window.focusedWindow():moveToUnit({0, 0.5, 1, 0.5}) end)

-- quarter of screen
hs.hotkey.bind({"shift","alt", "cmd"}, "left", function() hs.window.focusedWindow():moveToUnit({0, 0, 0.5, 0.5}) end)
hs.hotkey.bind({"shift","alt", "cmd"}, "right", function() hs.window.focusedWindow():moveToUnit({0.5, 0.5, 0.5, 0.5}) end)
hs.hotkey.bind({"shift","alt", "cmd"}, "up", function() hs.window.focusedWindow():moveToUnit({0.5, 0, 0.5, 0.5}) end)
hs.hotkey.bind({"shift","alt", "cmd"}, "down", function() hs.window.focusedWindow():moveToUnit({0, 0.5, 0.5, 0.5}) end)

-- full screen
hs.hotkey.bind({"alt", "cmd"}, "f", function() hs.window.focusedWindow():moveToUnit({0, 0, 1, 1}) end)

-- center screen
hs.hotkey.bind({"alt", "cmd"}, "c", function() hs.window.focusedWindow():centerOnScreen() end)

-- window switcher
switcher = hs.window.switcher.new(
   hs.window.filter.new()
      :setAppFilter('Emacs', {allowRoles = '*', allowTitles = 1}), -- make emacs window show in switcher list
   {
      -- showTitles = false,		-- don't show window title
      thumbnailSize = 200,		-- window thumbnail size
      -- showSelectedThumbnail = false,	-- don't show bigger thumbnail
      backgroundColor = {0, 0, 0, 0.8}, -- background color
      highlightColor = {0.3, 0.3, 0.3, 0.8}, -- selected color
   }
)
hs.hotkey.bind("cmd", "k", function() switcher.nextWindow() end)
hs.hotkey.bind("cmd", "j", function() switcher.previousWindow() end)

-- hammerspoon config auto reload when init.lua saved
function reloadConfig(files)
    doReload = false
    for _,file in pairs(files) do
        if file:sub(-4) == ".lua" then
            doReload = true
        end
    end
    if doReload then
        hs.reload()
    end
end
myWatcher = hs.pathwatcher.new(os.getenv("HOME") .. "/.hammerspoon/", reloadConfig):start()
hs.alert.show("Config loaded")
